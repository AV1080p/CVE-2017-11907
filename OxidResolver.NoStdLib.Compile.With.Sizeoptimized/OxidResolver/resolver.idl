import "oaidl.idl";
import "ocidl.idl";

typedef GUID CID;
typedef unsigned hyper ID;
typedef unsigned hyper OXID;

typedef unsigned hyper OID;
typedef unsigned hyper SETID;
typedef GUID IPID;
typedef REFGUID REFIPID;

typedef struct tagCOMVERSION
{
	unsigned short MajorVersion;
	unsigned short MinorVersion;
} COMVERSION;
typedef struct tagORPC_EXTENT
{
	GUID id;
	unsigned long size;
	[size_is((size + 7)&~7)] byte data[];
} ORPC_EXTENT;
typedef struct tagORPC_EXTENT_ARRAY
{
	unsigned long size;
	unsigned long reserved;
	[size_is((size + 1)&~1, ), unique] ORPC_EXTENT **extent;
} ORPC_EXTENT_ARRAY;
typedef struct tagORPCTHIS
{
	COMVERSION version;
	unsigned long flags;
	unsigned long reserved1;
	CID cid;
	[unique] ORPC_EXTENT_ARRAY *extensions;
} ORPCTHIS;
typedef struct tagORPCTHAT
{
	unsigned long flags;
	[unique] ORPC_EXTENT_ARRAY *extensions;
} ORPCTHAT;
typedef struct tagDUALSTRINGARRAY
{
	unsigned short wNumEntries;
	unsigned short wSecurityOffset;
	[size_is(wNumEntries)] unsigned short aStringArray[];
} DUALSTRINGARRAY;
enum tagCPFLAGS
{
	CPFLAG_PROPAGATE = 0x1,
	CPFLAG_EXPOSE = 0x2,
	CPFLAG_ENVOY = 0x4,
};
typedef struct tagMInterfacePointer
{
	unsigned long ulCntData;
	[size_is(ulCntData)] byte abData[];
} MInterfacePointer;
typedef [unique] MInterfacePointer * PMInterfacePointer;
typedef struct tagErrorObjectData
{
	DWORD dwVersion;
	DWORD dwHelpContext;
	IID iid;
	[unique, string]wchar_t* pszSource;
	[unique, string]wchar_t* pszDescription;
	[unique, string]wchar_t* pszHelpFile;
} ErrorObjectData;


[
	uuid(99fcfec4-5260-101b-bbcb-00aa0021347a),
	pointer_default(unique)
]
interface IObjectExporter
{
	[idempotent] error_status_t ResolveOxid
	(
		[in] handle_t hRpc,
		[in] OXID *pOxid,
		[in] unsigned short cRequestedProtseqs,
		[in, ref, size_is(cRequestedProtseqs)]
		unsigned short arRequestedProtseqs[],
		[out, ref] DUALSTRINGARRAY **ppdsaOxidBindings,
		[out, ref] IPID *pipidRemUnknown,
		[out, ref] DWORD *pAuthnHint
		);
	[idempotent] error_status_t SimplePing
	(
		[in] handle_t hRpc,
		[in] SETID *pSetId
	);
	[idempotent] error_status_t ComplexPing
	(
		[in] handle_t hRpc,
		[in, out] SETID *pSetId,
		[in] unsigned short SequenceNum,
		[in] unsigned short cAddToSet,
		[in] unsigned short cDelFromSet,
		[in, unique, size_is(cAddToSet)] OID AddToSet[],
		[in, unique, size_is(cDelFromSet)] OID DelFromSet[],
		[out] unsigned short *pPingBackoffFactor
	);
	[idempotent] error_status_t ServerAlive
	(
		[in] handle_t hRpc
	);
	[idempotent] error_status_t ResolveOxid2
	(
		[in] handle_t hRpc,
		[in] OXID *pOxid,
		[in] unsigned short cRequestedProtseqs,
		[in, ref, size_is(cRequestedProtseqs)]
		unsigned short arRequestedProtseqs[],
		[out, ref] DUALSTRINGARRAY **ppdsaOxidBindings,
		[out, ref] IPID *pipidRemUnknown,
		[out, ref] DWORD *pAuthnHint,
		[out, ref] COMVERSION *pComVersion
		);
	[idempotent] error_status_t ServerAlive2
	(
		[in] handle_t hRpc,
		[out, ref] COMVERSION *pComVersion,
		[out, ref] DUALSTRINGARRAY **ppdsaOrBindings,
		[out, ref] DWORD *pReserved
	);
}
